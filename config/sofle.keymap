#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#include <behaviors.dtsi>

#include <behaviors/num_word.dtsi> // Requires auto-layer module.

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/sofle.h" // Source desired key-position labels

#include <locale/keys_de.h> // for  german keys
#include "zmk-helpers/unicode-chars/german.dtsi"

/*
sofle mappings
╭────────────────────────────┬────────────────────────────╮ ╭─────────────────────────────┬─────────────────────────────╮
│  0   1   2   3   4   5     │      6   7   8   9  10  11 │ │ LN5 LN4 LN3 LN2 LN1 LN0     │     RN0 RN1 RN2 RN3 RN4 RN5 │
│ 12  13  14  15  16  17     │     18  19  20  21  22  23 │ │ LT5 LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 RT5 │
│ 24  25  26  27  28  29     │     30  31  32  33  34  35 │ │ LM5 LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 RM5 │
│ 36  37  38  39  40  41  42 │ 43  44  45  46  47  48  49 │ │ LB5 LB4 LB3 LB2 LB1 LB0 LEC │ REC RB0 RB1 RB2 RB3 RB4 RB5 │
╰───────╮ 50  51  52  53  54 │ 55  56  57  58  59 ╭───────╯ ╰───────╮ LH4 LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 RH4 ╭───────╯
        ╰────────────────────┴────────────────────╯                 ╰─────────────────────┴─────────────────────╯
*/

/* layers */
#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define MOUSE 4
#define FN 5

#define QUICK_TAP_MS 175

// SYM + NAV --> SYS
/* ZMK_CONDITIONAL_LAYER(sys, SYM NAV, SYSTEM) */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 4000  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 50    // 10

#include <dt-bindings/zmk/pointing.h>

&soft_off { hold-time-ms = <5000>; };

// sticky-key config
&sk {
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

// long-tap action on hold, short-tap action on all interrupts
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;

};

// config for mouse, defaults in comments
&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <750>;     // 300
    delay-ms = <0>;                   // 0
};
&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;      // 300
    delay-ms = <0>;                   // 0
};

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
    ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
    bindings = <BINDING1>, <BINDING2>;)

// Smart-mouse, requires tri-state module.
ZMK_TRI_STATE(
    smart_mouse,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LM3 LM2 LM1 LM0 LB3 LB2 LB1 LB0 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RB0 RB1 RB2 RB3 RM0 RM1 RM2 RM3>;
    ignored-layers = <MOUSE>;
)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word { // Mods deactivate caps-word, requires PR #1451
  /delete-property/ ignore-modifiers;
};

&num_word {
  continue-list = <BSPC DEL DOT COMMA DE_ASTRK DE_PLUS DE_MINUS DE_SLASH>;  // do not continue on PLUS, MINUS, STAR, FSLH, EQUAL
};
// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define _SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(
    smart_num,
    bindings = <&mo>, <&num_dance>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_TAP_DANCE(
    num_dance,
    bindings = <&num_word NUM>, <&sl NUM>;
    tapping-term-ms = <200>;
)

// tap: sticky layer | double tap: toggle NAV | hold: NAV layer
#define _SMART_SYM &smart_sym SYM 0
ZMK_HOLD_TAP(
    smart_sym,
    bindings = <&mo>, <&sym_dance>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
#define _SMART_SYM2 &smart_sym2 SYM SYM
ZMK_HOLD_TAP(
    smart_sym2,
    bindings = <&mo>, <&tog>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_TAP_DANCE(
    sym_dance,
    bindings = <&sl SYM>, <&tog SYM>;
    tapping-term-ms = <300>;
)

// tap: sticky layer | double tap: toggle SYM | hold: SYM layer
#define _SMART_NAV &smart_nav NAV 0
ZMK_HOLD_TAP(
    smart_nav,
    bindings = <&mo>, <&nav_dance>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
#define _SMART_NAV2 &smart_nav2 NAV NAV
ZMK_HOLD_TAP(
    smart_nav2,
    bindings = <&mo>, <&tog>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
)
ZMK_TAP_DANCE(
    nav_dance,
    bindings = <&sl NAV>, <&tog NAV>;
    tapping-term-ms = <300>;
)

// SMART_NAV with shift behavior:
// - Normal press: SMART_NAV
// - With Shift: SMART_SYM
// Allows accessing symbol layer with shift+nav key
#define _SMART_NAV_SYM &nav_sym_morph
ZMK_MOD_MORPH(nav_sym_morph,
    bindings = <_SMART_NAV>, <_SMART_SYM2>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// SMART_SYM with shift behavior:
// - Normal press: SMART_SYM
// - With Shift: SMART_NAV
// Allows accessing navigation layer with shift+sym key
#define _SMART_SYM_NAV &sym_nav_morph
ZMK_MOD_MORPH(sym_nav_morph,
    bindings = <_SMART_SYM>, <_SMART_NAV2>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete

ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)
ZMK_MOD_MORPH(rbs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// Advanced backspace/delete with Ctrl support using ZMK Helpers
// - Tap: Backspace
// - Shift + tap: Delete
// - RShift + tap: Shift+Delete
// - Ctrl + tap: Ctrl+Backspace (delete word backward)
// - Ctrl+Shift + tap: Ctrl+Delete (delete word forward)

ZMK_MOD_MORPH(ctrl_bspc_del,
    bindings = <&kp LC(BSPC)>, <&kp LC(DEL)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <(MOD_RSFT)>;
)

ZMK_MOD_MORPH(enhanced_bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <(MOD_RSFT)>;
)

ZMK_MOD_MORPH(smart_bs_del,
    bindings = <&enhanced_bs_del>, <&ctrl_bspc_del>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// Advanced backspace/delete with Ctrl support using ZMK Helpers
// - Tap: Backspace
// - Shift + tap: Delete
// - RShift + tap: Shift+Delete
// - Ctrl + tap: Ctrl+Backspace (delete word backward)
// - Ctrl+Shift + tap: Ctrl+Delete (delete word forward)

ZMK_MOD_MORPH(ctrl_bspc_del,
    bindings = <&kp LC(BSPC)>, <&kp LC(DEL)>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <(MOD_RSFT)>;
)

ZMK_MOD_MORPH(enhanced_bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <(MOD_RSFT)>;
)

ZMK_MOD_MORPH(smart_bs_del,
    bindings = <&enhanced_bs_del>, <&ctrl_bspc_del>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: Space | Shift + tap: enter
// rshift and rctrl are being passed through
ZMK_MOD_MORPH(spc_enter,
    bindings = <&kp SPACE>, <&kp ENTER>;
    mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL)>;
    keep-mods = <(MOD_RSFT|MOD_RCTL)>;
)


// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(
    swapper,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    /* ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>; */
)

// Shifted keypress macro
ZMK_MACRO_ONE_PARAM(shifted,
    bindings =
        <&macro_press>,
        <&kp LSHFT &macro_param_1to1>,
        <&macro_tap>,
        <&kp MACRO_PLACEHOLDER>,
        <&macro_release>,
        <&kp LSHFT>;
)
// Autoshift hold-tap behavior
ZMK_HOLD_TAP(as_ht,
    tapping-term-ms = <230>;
    flavor = "tap-preferred";
    bindings = <&shifted>, <&kp>;
)
// Autoshift macro
ZMK_MACRO_ONE_PARAM(as,
    bindings =
        <&macro_press>,
        <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_release>,
        <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
)

// Reversed autoshift hold-tap behavior
ZMK_HOLD_TAP(ras_ht,
    tapping-term-ms = <230>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&shifted>;
)
// Reversed autoshift macro
ZMK_MACRO_ONE_PARAM(ras,
    bindings =
        <&macro_press>,
        <&macro_param_1to1 &macro_param_1to2 &ras_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_release>,
        <&macro_param_1to1 &macro_param_1to2 &ras_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
)
// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut,
    bindings = <&kp LC(C)>, <&kp LC(X)>;
    tapping-term-ms = <200>;
)

// Tap: cz | double-tap: cy
ZMK_TAP_DANCE(ctrl_zy,
    bindings = <&kp LC(DE_Z)>, <&kp LC(DE_Y)>;
    tapping-term-ms = <200>;
)

// Tap: cz | double-tap: cy
ZMK_TAP_DANCE(qmark_excl,
    bindings = <&kp DE_QMARK>, <&kp DE_EXCL>;
    tapping-term-ms = <200>;
)

// Tap: dqt | double-tap: sqt
ZMK_TAP_DANCE(dqt_sqt,
    bindings = <&kp DE_DQT>, <&kp DE_SQT>;
    tapping-term-ms = <300>;
)

// Tap: dot | double-tap: doubledot
ZMK_TAP_DANCE(dot_col,
    bindings = <&kp DE_DOT>, <&kp DE_COLON>;
    tapping-term-ms = <200>;
)

// Tap: comma | double-tap: semicolon
ZMK_TAP_DANCE(com_sem,
    bindings = <&kp DE_COMMA>, <&kp DE_SEMICOLON>;
    tapping-term-ms = <200>;
)

// Tap: left bracket | double-tap: less than
ZMK_TAP_DANCE(lbkt_lt,
    bindings = <&kp DE_LBKT>, <&kp DE_LT>;
    tapping-term-ms = <200>;
)

// Tap: right bracket | double-tap: greater than
ZMK_TAP_DANCE(rbkt_gt,
    bindings = <&kp DE_RBKT>, <&kp DE_GT>;
    tapping-term-ms = <200>;
)

// Tap: slash | double-tap: backslash
ZMK_TAP_DANCE(slash_bslash,
    bindings = <&kp DE_SLASH>, <&kp DE_BSLH>;
    tapping-term-ms = <200>;
)
// Tap: backslash | double-tap: slash
ZMK_TAP_DANCE(bslash_slash,
    bindings = <&kp DE_BSLH>, <&kp DE_SLASH>;
    tapping-term-ms = <200>;
)

// Tap: tilde | double-tap: 0
ZMK_TAP_DANCE(tilde_n0,
    bindings = <&kp DE_TILDE >, <&kp DE_N0>;
    tapping-term-ms = <200>;
)

// Tap: hash | double-tap: dollar
ZMK_TAP_DANCE(hash_dllr,
    bindings = <&kp DE_HASH>, <&kp DE_DLLR>;
    tapping-term-ms = <200>;
)




#define _CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.

//combos
#include "sofle_combos.dtsi"

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "def";
            bindings = <
                  &kp ESC       &as DE_N1   &as DE_N2   &as DE_N3   &as DE_N4       &as DE_N5                                          &as DE_N6    &as DE_N7    &as DE_N8      &as DE_N9    &as DE_N0         &as DE_SZ
                  &kp TAB       &kp DE_Q    &kp W       &kp DE_E    &kp R           &kp T                                              &kp DE_Z     &kp U        &kp I          &kp O        &kp P             &kp DE_U_UMLAUT
                  &smart_shft   &kp A       &kp S       &kp D       &kp F           &kp G                                              &kp H        &kp J        &kp K          &kp L        &kp DE_O_UMLAUT   &kp DE_A_UMLAUT
                  &kp LCTRL     &kp DE_Y    &kp X       &kp C       &kp V           &kp B        &kp C_MUTE           &none            &kp N        &kp M        &as DE_COMMA   &as DE_DOT   &as DE_MINUS      &bs_del
                                            &kp LGUI    &kp LALT    &smart_bs_del   &spc_enter   _SMART_SYM_NAV       _SMART_NAV_SYM   &spc_enter   &kp RSHIFT   &kp LALT       &kp RCTRL
            >;
                sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        sym_layer {
            display-name = "sym";
            bindings = <
                  &kp F1         &kp F2       &kp F3              &kp F4                  &kp F5                 &kp F6                                         &kp F7        &kp F8        &kp F9        &kp F10         &kp F11      &kp F12
                  &as DE_CARET   &ras DE_N1   &ras DE_N2          &ras DE_N3              &ras DE_N4             &ras DE_N5                                     &ras DE_N6    &ras DE_N7    &ras DE_N8    &ras DE_N9      &ras DE_N0   &as DE_GRAVE
                  &smart_shft    &none        &mt DE_EURO DE_AT   &mt DE_SLASH DE_ASTRK   &mt DE_MINUS DE_PLUS   &mt DE_PIPE DE_EQUAL                           &qmark_excl   &dot_col      &com_sem      &as DE_MINUS    &dqt_sqt     &none
                  &kp LCTRL      &tilde_n0    &bslash_slash       &kp DE_LBRC             &kp DE_LPAR            &lbkt_lt               &none         &none     &rbkt_gt      &kp DE_RPAR   &kp DE_RBRC   &slash_bslash   &hash_dllr   &kp LCTRL
                                              &swapper            &kp LALT                &smart_bs_del          &spc_enter             &mo SYM       &mo SYM   &spc_enter    &kp LSHIFT    &kp LALT      &kp LGUI
            >;
        };

        num_layer {
            display-name = "num";
            bindings = <
                  &kp ESC       &none                   &none       &none       &none           &none                                &none        &none        &none       &none       &none                   &none
                  &kp TAB       &mt DE_SLASH DE_ASTRK   &kp DE_N7   &kp DE_N8   &kp DE_N9       &none                                &none        &kp DE_N9    &kp DE_N8   &kp DE_N7   &mt DE_SLASH DE_ASTRK   &none
                  &smart_shft   &mt DE_MINUS DE_PLUS    &kp DE_N4   &kp DE_N5   &kp DE_N6       &dot_col                             &dot_col     &kp DE_N6    &kp DE_N5   &kp DE_N4   &mt DE_MINUS DE_PLUS    &none
                  &kp LCTRL     &kp DE_N0               &kp DE_N1   &kp DE_N2   &kp DE_N3       &com_sem     &none         &none     &com_sem     &kp DE_N3    &kp DE_N2   &kp DE_N1   &kp DE_N0               &none
                                                        &kp LGUI    &kp LALT    &smart_bs_del   &spc_enter   &mo NUM       &mo NUM   &spc_enter   &kp LSHIFT   &kp LALT    &kp LCTRL
            >;
        };

        nav_layer {
            display-name = "nav";
            bindings = <
                  &kp ESC       &kp C_PREVIOUS      &kp C_REWIND   &kp C_PLAY_PAUSE   &kp C_FAST_FORWARD   &kp C_NEXT                            &kp C_PREVIOUS      &kp C_REWIND     &kp C_PLAY_PAUSE   &kp C_FAST_FORWARD   &kp C_NEXT   &none
                  &kp TAB       &mt DE_DLLR DE_N0   &mt A I        &mt B W            &mt P DE_Y           &mt LC(R) U                           &mt LC(HOME) HOME   &kp PG_DN        &kp PG_UP          &mt LC(END) END      &none        &none
                  &smart_shft   &mt END HOME        &kp LEFT       &kp UP             &kp DOWN             &kp RIGHT                             &kp LEFT            &kp DOWN         &kp UP             &kp RIGHT            &none        &none
                  &kp LCTRL     &kp LC(A)           &kp LC(S)      &copy_cut          &kp LC(V)            &ctrl_zy      &none         &none     &msc SCRL_LEFT      &msc SCRL_DOWN   &msc SCRL_UP       &msc SCRL_RIGHT      &none        &kp LCTRL
                                                    &swapper       &kp LALT           &smart_bs_del        &spc_enter    &mo NAV       &mo NAV   &spc_enter          &kp LSHFT        &kp LALT           &kp LGUI
            >;
        };

        mouse_layer {
            display-name = "mouse";
            bindings = <
                  &none   &none   &none            &none          &none            &none                                 &none            &none            &none          &none             &none   &none
                  &none   &none   &none            &none          &none            &none                                 &none            &none            &none          &none             &none   &none
                  &none   &none   &mmv MOVE_LEFT   &mmv MOVE_UP   &mmv MOVE_DOWN   &mmv MOVE_RIGHT                       &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_UP   &mmv MOVE_RIGHT   &none   &none
                  &none   &none   &msc SCRL_LEFT   &msc SCRL_UP   &msc SCRL_DOWN   &msc SCRL_RIGHT   &none       &none   &msc SCRL_LEFT   &msc SCRL_DOWN   &msc SCRL_UP   &msc SCRL_RIGHT   &none   &none
                                  &none            &mkp MCLK      &mkp RCLK        &mkp LCLK         &none       &none   &mkp LCLK        &mkp RCLK        &mkp MCLK      &none
            >;
        };

        fn_layer {
            display-name = "fn";
            bindings = <
                  &out OUT_TOG     &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2        &bt BT_SEL 3   &bt BT_SEL 4                           &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2       &bt BT_DISC 3   &bt BT_DISC 4   &bt BT_CLR
                  &none            &none          &none          &none               &none          &none                                  &none           &none           &none               &none           &none           &none
                  &none            &none          &none          &none               &none          &none                                  &none           &none           &none               &none           &none           &none
                  &studio_unlock   &none          &none          &none               &none          &none          &none         &none     &none           &none           &none               &none           &none           &bt BT_CLR_ALL
                                                  &soft_off      &ext_power EP_TOG   &none          &none          &tog FN       &tog FN   &none           &none           &ext_power EP_TOG   &soft_off
            >;
        };
    };
};
